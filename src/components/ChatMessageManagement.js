import { useState, useEffect, useRef } from "react";
import {
  FaPaperPlane,
  FaCheck,
  FaTimes,
  FaUserPlus,
  FaTrash,
} from "react-icons/fa";
import {
  getSupportQueue,
  removeFromQueue,
} from "../services/supportQueueServicesAdmin.js";
import {
  assignStaff,
  closeConversation,
} from "../services/conversationServicesAdmin.js";
import {
  sendMessage,
  getMessagesByConversation,
} from "../services/messageServicesAdmin.js";
import { jwtDecode } from "jwt-decode";
import "../styles/StaffChat.css";

//Socket
import { io } from "socket.io-client";

const ChatMessageManagement = ({ setHasNewSupportRequest }) => {
  const [supportQueue, setSupportQueue] = useState([]);
  const [activeConversation, setActiveConversation] = useState(null);
  const [messages, setMessages] = useState([]);
  const [newMessage, setNewMessage] = useState("");
  const [staffId, setStaffId] = useState(null);
  const [customerName, setCustomerName] = useState("");
  const [customerId, setCustomerId] = useState("");
  const chatBodyRef = useRef();
  const socketRef = useRef(null);

  // S·ª≠a l·∫°i useEffect trong ChatMessageManagement
  useEffect(() => {
    // Reset th√¥ng b√°o khi v√†o trang chat
    if (typeof setHasNewSupportRequest === "function") {
      console.log("Resetting notification flag");
      setHasNewSupportRequest(false);
    }

    return () => {
      // C√≥ th·ªÉ th√™m cleanup n·∫øu c·∫ßn
    };
  }, [setHasNewSupportRequest]);

  // L·∫•y th√¥ng tin nh√¢n vi√™n t·ª´ token
  useEffect(() => {
    const token = localStorage.getItem("token");
    if (token) {
      try {
        const decoded = jwtDecode(token);
        setStaffId(decoded.userId || decoded.id || decoded._id);
      } catch (err) {
        console.error("Token kh√¥ng h·ª£p l·ªá:", err);
      }
    }
  }, []);

  // L·∫•y danh s√°ch h√†ng ch·ªù
  const fetchSupportQueue = async () => {
    try {
      const data = await getSupportQueue();
      setSupportQueue(data.queue || []);
    } catch (error) {
      console.error("L·ªói khi l·∫•y h√†ng ch·ªù:", error);
    }
  };
  useEffect(() => {
    fetchSupportQueue();

    // Kh·ªüi t·∫°o socket k·∫øt n·ªëi t·ªõi server
    socketRef.current = io(process.env.REACT_APP_API_SOCKET_ADMIN);

    // L·∫Øng nghe event server g·ª≠i khi h√†ng ch·ªù thay ƒë·ªïi
    socketRef.current.on("supportQueueUpdated", () => {
      fetchSupportQueue();
    });

    return () => {
      socketRef.current.disconnect();
    };
  }, []);

  // L·∫•y tin nh·∫Øn c·ªßa cu·ªôc tr√≤ chuy·ªán
  const fetchMessages = async (conversationId) => {
    try {
      const data = await getMessagesByConversation(conversationId);
      setMessages(data.messages || []);
    } catch (error) {
      console.error("L·ªói khi l·∫•y tin nh·∫Øn:", error);
    }
  };

  useEffect(() => {
    if (!socketRef.current) return;

    socketRef.current.on("receive_message", (message) => {
      if (message.conversationId === activeConversation) {
        setMessages((prev) => [...prev, message]);
      }
    });

    return () => {
      socketRef.current.off("receive_message");
    };
  }, [activeConversation]);

  // Nh·∫≠n cu·ªôc tr√≤ chuy·ªán t·ª´ h√†ng ch·ªù
  const acceptConversation = async (conversationId, customerId) => {
    if (!staffId) return;

    try {
      console.log("G√°n nh√¢n vi√™n", { conversationId, staffId });
      // G√°n nh√¢n vi√™n v√†o cu·ªôc tr√≤ chuy·ªán
      await assignStaff(conversationId, staffId);
      // T√¨m kh√°ch h√†ng trong h√†ng ch·ªù ƒë·ªÉ l·∫•y t√™n
      const customer = supportQueue.find(
        (item) => item.conversationId === conversationId
      );

      if (customer) {
        setCustomerName(
          customer.customerId?.name || `KH#${customerId.slice(0, 6)}`
        );
        setCustomerId(customerId);
      }

      // C·∫≠p nh·∫≠t state
      setActiveConversation(conversationId);
      socketRef.current.emit("join", conversationId);
      fetchMessages(conversationId);
      fetchSupportQueue();
    } catch (error) {
      console.error("L·ªói khi nh·∫≠n cu·ªôc tr√≤ chuy·ªán:", error);
    }
  };

  const handleRemoveFromQueue = async (customerId, conversationId) => {
    //if (!window.confirm("X√≥a kh√°ch n√†y kh·ªèi h√†ng ch·ªù?")) return;

    try {
      await removeFromQueue(customerId);
      fetchSupportQueue();
    } catch (error) {
      console.error("L·ªói khi xo√° kh√°ch kh·ªèi h√†ng ch·ªù:", error);
    }
  };

  // G·ª≠i tin nh·∫Øn
  const handleSendMessage = async () => {
    if (!newMessage.trim() || !activeConversation || !staffId) return;

    try {
      const messageData = {
        conversationId: activeConversation,
        senderId: staffId,
        receiverId: customerId,
        senderRole: "staff",
        message: newMessage,
        isBot: false,
      };

      await sendMessage(messageData);

      // C·∫≠p nh·∫≠t tin nh·∫Øn
      setNewMessage("");
      fetchMessages(activeConversation);
    } catch (error) {
      console.error("L·ªói khi g·ª≠i tin nh·∫Øn:", error);
    }
  };

  // ƒê√≥ng cu·ªôc tr√≤ chuy·ªán
  const handleCloseConversation = async (isResolved = true) => {
    if (!activeConversation) return;

    console.log("üëâ ƒê√≥ng cu·ªôc tr√≤ chuy·ªán:", {
      conversationId: activeConversation,
      isResolved,
    });

    try {
      await closeConversation(activeConversation, isResolved);
      setActiveConversation(null);
      setMessages([]);
      setCustomerName("");
    } catch (error) {
      console.error("L·ªói khi ƒë√≥ng cu·ªôc tr√≤ chuy·ªán:", error);
    }
  };

  // T·ª± ƒë·ªông scroll xu·ªëng khi c√≥ tin nh·∫Øn m·ªõi
  useEffect(() => {
    chatBodyRef.current?.scrollTo({
      top: chatBodyRef.current.scrollHeight,
      behavior: "smooth",
    });
  }, [messages]);

  // L√†m m·ªõi danh s√°ch h√†ng ch·ªù ƒë·ªãnh k·ª≥
  useEffect(() => {
    fetchSupportQueue();
    const interval = setInterval(fetchSupportQueue, 5000); // L√†m m·ªõi m·ªói 5 gi√¢y

    return () => clearInterval(interval);
  }, []);

  return (
    <div className="staff-chat-container">
      <h2>Qu·∫£n l√Ω h·ªó tr·ª£ kh√°ch h√†ng</h2>

      <div className="chat-layout">
        {/* Danh s√°ch h√†ng ch·ªù */}
        <div className="queue-section">
          <div className="queue-header">
            <h3>H√†ng ch·ªù h·ªó tr·ª£ ({supportQueue.length})</h3>
            {supportQueue.length > 0}
          </div>
          <div className="queue-list">
            {supportQueue.length === 0 ? (
              <p className="empty-queue">
                Kh√¥ng c√≥ kh√°ch h√†ng n√†o trong h√†ng ch·ªù
              </p>
            ) : (
              supportQueue.map((item) => (
                <div key={item.customerId._id} className="queue-item">
                  <div className="customer-info">
                    <span className="customer-name">
                      {item.customerId.name ||
                        item.customerId.email ||
                        `KH#${item.customerId._id.toString().slice(0, 6)}`}
                    </span>

                    <span className="waiting-time">
                      ƒêang ch·ªù:{" "}
                      {Math.floor(
                        (Date.now() -
                          new Date(
                            item.requestedAt || item.createdAt
                          ).getTime()) /
                          60000
                      )}{" "}
                      ph√∫t
                    </span>
                  </div>
                  <div className="chat-actions">
                    {activeConversation === null && (
                      <button
                        onClick={() =>
                          acceptConversation(
                            item.conversationId,
                            item.customerId
                          )
                        }
                        className="accept-btn"
                        title="Nh·∫≠n cu·ªôc tr√≤ chuy·ªán"
                      >
                        <span className="icon-chat">
                          <FaUserPlus />
                        </span>
                      </button>
                    )}

                    <button
                      onClick={() =>
                        handleRemoveFromQueue(
                          item.customerId?._id || item.customerId,
                          item.conversationId
                        )
                      }
                      className="remove-btn"
                      title="X√≥a kh·ªèi h√†ng ch·ªù"
                    >
                      <span className="icon-chat">
                        {" "}
                        <FaTrash />
                      </span>
                    </button>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>

        {/* Khu v·ª±c chat */}
        <div className="chat-section">
          {activeConversation ? (
            <>
              <div className="chat-header">
                <h3>ƒêang tr√≤ chuy·ªán v·ªõi {customerName || "kh√°ch h√†ng"}</h3>
                <div className="chat-actions">
                  <button
                    onClick={() => handleCloseConversation(true)}
                    className="resolve-btn"
                    title="ƒê√°nh d·∫•u ƒë√£ gi·∫£i quy·∫øt"
                  >
                    {" "}
                    <span className="icon-chat">
                      <FaCheck />
                    </span>
                  </button>
                  <button
                    onClick={() => handleCloseConversation(false)}
                    className="close-btn"
                    title="ƒê√≥ng cu·ªôc tr√≤ chuy·ªán"
                  >
                    <span className="icon-chat">
                      {" "}
                      <FaTimes />
                    </span>
                  </button>
                </div>
              </div>

              <div ref={chatBodyRef} className="chat-messages">
                {messages.length === 0 ? (
                  <p className="no-messages">Ch∆∞a c√≥ tin nh·∫Øn n√†o</p>
                ) : (
                  messages.map((msg, index) => (
                    <div
                      key={index}
                      className={`message ${
                        msg.senderRole === "staff"
                          ? "staff-message"
                          : "customer-message"
                      }`}
                    >
                      <div className="message-content">
                        <p>{msg.message}</p>
                        <span className="message-time">
                          {new Date(msg.createdAt).toLocaleTimeString("vi-VN", {
                            hour: "2-digit",
                            minute: "2-digit",
                          })}
                        </span>
                      </div>
                    </div>
                  ))
                )}
              </div>

              <div className="message-input">
                <input
                  type="text"
                  value={newMessage}
                  onChange={(e) => setNewMessage(e.target.value)}
                  placeholder="Nh·∫≠p tin nh·∫Øn..."
                  onKeyPress={(e) => e.key === "Enter" && handleSendMessage()}
                />
                <button
                  onClick={handleSendMessage}
                  className="send-btn"
                  title="G·ª≠i tin nh·∫Øn"
                >
                  <FaPaperPlane />
                </button>
              </div>
            </>
          ) : (
            <div className="no-active-chat">
              <p>Ch·ªçn m·ªôt cu·ªôc tr√≤ chuy·ªán t·ª´ h√†ng ch·ªù ƒë·ªÉ b·∫Øt ƒë·∫ßu</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default ChatMessageManagement;
